# -*- coding: utf-8 -*-

from linepy import *
from akad.ttypes import Message
from datetime import datetime
from time import sleep
from bs4 import BeautifulSoup
from humanfriendly import format_timespan, format_size, format_number, format_length
import time, random, sys, json, codecs, threading, glob, re, string, os, requests, subprocess, six, ast, pytz, urllib, urllib.parse
from gtts import gTTS
from googletrans import Translator
#==============================================================================#
botStart = time.time()

line = LINE()
line.log("Auth Token : " + str(line.authToken))
channelToken = line.getChannelResult()
line.log("Channel Token : " + str(channelToken))

ki1 = LINE()
ki1.log("Auth Token : " + str(line.authToken))
channelToken = ki1.getChannelResult()
ki1.log("Channel Token : " + str(channelToken))

#ki2 = LINE()
#ki2.log("Auth Token : " + str(line.authToken))
#channelToken = ki2.getChannelResult()
#ki2.log("Channel Token : " + str(channelToken))

#ki3 = LINE()
#ki3.log("Auth Token : " + str(line.authToken))
#channelToken = ki3.getChannelResult()
#ki3.log("Channel Token : " + str(channelToken))

#ki4 = LINE()
#ki4.log("Auth Token : " + str(line.authToken))
#channelToken = ki4.getChannelResult()
#ki4.log("Channel Token : " + str(channelToken))

#ki5 = LINE()
#ki5.log("Auth Token : " + str(line.authToken))
#channelToken = ki5.getChannelResult()
#ki5.log("Channel Token : " + str(channelToken))

#ki6 = LINE()
#ki6.log("Auth Token : " + str(line.authToken))
#channelToken = ki6.getChannelResult()
#ki6.log("Channel Token : " + str(channelToken))

#ki7 = LINE()
#ki7.log("Auth Token : " + str(line.authToken))
#channelToken = ki7.getChannelResult()
#ki7.log("Channel Token : " + str(channelToken))

#ki8 = LINE()
#ki8.log("Auth Token : " + str(line.authToken))
#channelToken = ki8.getChannelResult()
#ki8.log("Channel Token : " + str(channelToken))

#ki9 = LINE()
#ki9.log("Auth Token : " + str(line.authToken))
#channelToken = ki9.getChannelResult()
#ki9.log("Channel Token : " + str(channelToken))

#ki10 = LINE()
#ki10.log("Auth Token : " + str(line.authToken))
#channelToken = ki10.getChannelResult()
#ki10.log("Channel Token : " + str(channelToken))

readOpen = codecs.open("read.json","r","utf-8")
settingsOpen = codecs.open("temp.json","r","utf-8")
#~~~~~~~‚Ä¢‚Ä¢‚Ä¢~~~~~~~~~~~~~~‚Ä¢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def restartBot():
    print ("[ INFO ] BOT RESETTED")
    time.sleep(3)
    python = sys.executable
    os.execl(python, python, *sys.argv)
    
def logError(text):
    line.log("[ ERROR ] " + str(text))
    time_ = datetime.now()
    with open("errorLog.txt","a") as error:
        error.write("\n[%s] %s" % (str(time), text))
        
def sendMention(to, mid, firstmessage, lastmessage):
    try:
        arrData = ""
        text = "%s " %(str(firstmessage))
        arr = []
        mention = "@x "
        slen = str(len(text))
        elen = str(len(text) + len(mention) - 1)
        arrData = {'S':slen, 'E':elen, 'M':mid}
        arr.append(arrData)
        text += mention + str(lastmessage)
        line.sendMessage(to, text, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        logError(error)
        line.sendMessage(to, "[ INFO ] Error :\n" + str(error))

def sendMessage(to, Message, contentMetadata={}, contentType=0):
    mes = Message()
    mes.to, mes._from = to, profile.mid
    mes.text = text
    mes.contentType, mes.contentMetadata = contentType, contentMetadata
    if to not in messageReq:
        messageReq[to] = -1
    messageReq[to] += 1

def sendMessageWithMention(to, mid):
    try:
        aa = '{"S":"0","E":"3","M":'+json.dumps(mid)+'}'
        text_ = '@x '
        line.sendMessage(to, text_, contentMetadata={'MENTION':'{"MENTIONEES":['+aa+']}'}, contentType=0)
    except Exception as error:
        logError(error)

        
def mentionMembers(to, mid):
    try:
        arrData = ""
        textx = "‚ïî‚ïê‚ïê[Mention {} User]\n‚ï† ".format(str(len(mid)))
        arr = []
        no = 1
        for i in mid:
            mention = "@x\n"
            slen = str(len(textx))
            elen = str(len(textx) + len(mention) - 1)
            arrData = {'S':slen, 'E':elen, 'M':i}
            arr.append(arrData)
            textx += mention
            if no < len(mid):
                no += 1
                textx += "‚ï† "
            else:
                try:
                    textx += "‚ïö‚ïê‚ïê[ {} ]".format(str(line.getGroup(to).name))
                except:
                    pass
        line.sendMessage(to, textx, {'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        logError(error)
        line.sendMessage(to, "[ INFO ] Error :\n" + str(error))

def backupData():
    try:
        backup = settings
        f = codecs.open('temp.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = read
        f = codecs.open('read.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        return True
    except Exception as error:
        logError(error)
        return False

def helpmessage():
    helpMessage = """ SELFBOT
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   ‚ïë     [üêà ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏ó‡∏µ‡πà 1 üêà]      ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïëüçÅüáπüá≠ „Äé‡∏Ñ‡∏ó„Äè =  ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡πä‡∏Å
‚ïëüçÅüáπüá≠ „Äé‡πÑ‡∏≠‡∏î‡∏µ„Äè=  ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏£‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡πÄ‡∏ä‡∏¥‡∏ç„Äè= ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ó
‚ïëüçÅüáπüá≠ „Äé‡∏û‡∏π‡∏î „Äè= ‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏£‡∏¥‡∏û‡∏π‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°
‚ïëüçÅüáπüá≠ „Äé‡∏°‡∏¥‡∏î„Äè= ‡∏î‡∏π‡∏°‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡∏£‡πà‡∏≤‡∏á„Äè= ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç„Äè= ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏õ‡∏•‡∏≠‡∏°
‚ïëüçÅüáπüá≠ „Äé‡∏°‡∏¥‡∏î @„Äè= ‡∏î‡∏π‡∏°‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
‚ïëüçÅüáπüá≠ „Äé‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á „Äè= ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏π‡∏ó‡∏π‡∏õ
‚ïëüçÅüáπüá≠ „Äé‡∏ö‡∏∏‡∏Å„Äè= ‡∏™‡∏±‡πà‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏Ç‡πâ‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡∏≠‡∏≠‡∏Å„Äè= ‡∏™‡∏±‡πà‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏Å
‚ïëüçÅüáπüá≠ „ÄéTl: text„Äè= ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ß‡∏£‡∏±‡∏™
‚ïëüçÅüáπüá≠ „ÄéAuto join: on/off„Äè= 
‚ïëüçÅüáπüá≠ „ÄéAuto add: on/off„Äè= 
‚ïëüçÅüáπüá≠ „Äé‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó: ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó„Äè
‚ïëüçÅüáπüá≠ „ÄéClock: on/off„Äè= ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤
‚ïëüçÅüáπüá≠ „ÄéUp„Äè= ‡∏≠‡∏±‡∏û‡πÄ‡∏ß‡∏•‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡∏Ç‡∏≠‡∏•‡∏¥‡πâ‡∏á„Äè= ‡∏Ç‡∏≠‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á
‚ïëüçÅüáπüá≠ „Äé‡∏Å‡∏•‡∏∏‡πà‡∏°„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüçÅüáπüá≠ „Äé‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î„Äè= ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏≤
‚ïëüçÅüáπüá≠ „Äé‡∏ö‡∏•‡∏≠‡∏Ñ„Äè
‚ïëüçÅüáπüá≠ „Äé‡πÅ‡∏ó‡∏Å„Äè= ‡πÅ‡∏ó‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á
‚ïëüçÅüáπüá≠ „Äé‡∏°‡∏∂‡∏á‡∏ï‡∏≤‡∏¢„Äè= ‡∏•‡∏á‡πÉ‡∏ß‡∏£‡∏±‡∏™ 
‚ïëüçÅüáπüá≠ „Äé‡∏•‡∏ö‡∏£‡∏±‡∏ô„Äè= ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô
‚îÄ‚îÄ‚îÖ‚ïê‚ú•===========‚ú•‚ïê‚îÖ‚îÄ‚îÄ
·¥õ·¥á·¥Ä·¥ç·¥ç·¥è·¥Ö·¥Ö·¥Ä Ä·¥ãs·¥á ü“ì ô·¥è·¥õ            ‚ïë
‚îÄ‚îÄ‚îÖ‚ïê‚ú•===========‚ú•‚ïê‚îÖ‚îÄ‚îÄ
‚ïëüçÇüá®üá¶ „Äé‡∏ä‡∏∑‡πà‡∏≠ „Äè= ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤
‚ïëüçÇüá®üá¶ „ÄéGn: text „Äè= ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüçÇüá®üá¶ „Äé‡∏ô‡∏ô„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô
‚ïëüçÇüá®üá¶ „Äé‡∏≠‡∏≠„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô 
‚ïëüçÇüá®üá¶ „Äé‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î„Äè
‚ïëüçÇüá®üá¶ „Äé‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î‚ïë
‚ïëüçÇüá®üá¶ „Äé‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡πà‡∏≤„Äè= ‡∏ï‡∏£‡∏ß‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
‚ïëüçÇüá®üá¶ „ÄéLink on/off„Äè= ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÑ‡∏•‡∏Ñ‡πå
‚ïëüçÇüá®üá¶ „ÄéSpam on/off„Äè= ‡∏£‡∏±‡∏ô‡πÅ‡∏ä‡∏ï
‚ïëüçÇüá®üá¶ „Äé‡πÄ‡∏ó‡∏™„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏ö‡∏≠‡∏ó
‚ïëüçÇüá®üá¶ „ÄéMyginfo„Äè
‚ïëüçÇüá®üá¶ „ÄéGurl„Äè
‚ïëüçÇüá®üá¶ „ÄéGlist„Äè
‚ïëüçÇüá®üá¶ „Äé‡∏¢‡∏π‡∏ó‡∏π‡∏õ „Äè= ‡πÄ‡∏õ‡∏¥‡∏î‡∏¢‡∏π‡∏ó‡∏π‡∏õ
‚ïëüçÇüá®üá¶ „ÄéPhet: Tag„Äè
‚ïëüçÇüá®üá¶ „ÄéGcancel:„Äè
‚ïëüçÇüá®üá¶ „ÄéMasuk Join„Äè
‚ïëüçÇüá®üá¶ „ÄéSa:yang„Äè
‚ïëüçÇüá®üá¶ „ÄéBeb„Äè
‚ïëüçÇüá®üá¶ „ÄéCinta„Äè
‚ïëüçÇüá®üá¶ „ÄéSayang: „Äè
‚ïëüçÇüá®üá¶ „ÄéP:ulang„Äè
‚ïëüçÇüá®üá¶ „ÄéBan @„Äè= ‡πÅ‡∏ö‡∏ô
‚ïëüçÇüá®üá¶ „ÄéUban @„Äè= ‡πÅ‡∏Å‡πâ‡πÅ‡∏ö‡∏ô
‚ïëüçÇüá®üá¶ „Äé‡πÄ‡∏ä‡∏Ñ‡∏î‡∏≥„Äè= ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏ï‡∏¥‡∏î‡πÅ‡∏ö‡∏ô
‚ïëüçÇüá®üá¶ „Äé‡∏•‡πâ‡∏≤‡∏á‡∏î‡∏≥„Äè= ‡∏•‡∏ö‡∏Ñ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ô
‚ïëüçÇüá®üá¶ „ÄéComment :„Äè
‚ïëüçÇüá®üá¶ „ÄéBanlist„Äè
‚ïëüçÇüá®üá¶ „ÄéCekban„Äè
‚ïëüçÇüáπüá≠ „ÄéClear ban„Äè
‚ïëüçÇüáπüá≠ „ÄéKill @ Fuck @„Äè= ‡πÄ‡∏ï‡∏∞
‚ïëüçÇüáπüá≠ „ÄéSpeed / Sp„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ß
‚ïëüçÇüáπüá≠ „ÄéHack @2@3@4„Äè= ‡∏Ç‡πÇ‡∏°‡∏¢‡∏£‡∏π‡∏õ
‚ïëüçÇüáπüá≠ „ÄéAmbilin @„Äè
‚ïëüçÇüáπüá≠ „ÄéSampul @„Äè
‚ïëüçÇüáπüá≠ „Äé‡πÅ‡∏õ‡∏•‡∏á‡∏£‡πà‡∏≤‡∏á @„Äè=‡∏Å‡πä‡∏≠‡∏õ
‚ïëüçÇüáπüá≠ „Äé‡∏Å‡∏•‡∏±‡∏ö„Äè= ‡∏Å‡∏•‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
‚ïëüçÇüáπüá≠ „ÄéKeluar :@„Äè
‚ïëüçÇüáπüá≠ „Äémusic„Äè
‚ïëüçÇüáπüá≠ „Äé.reboot„Äè
‚ïëüçÇüáπüá≠ „ÄéWikipedia„Äè
‚ïëüçÇüáπüá≠ „ÄéCleanse„Äè
‚ïëüçÇüáπüá≠ „ÄéBs„Äè= ‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ß‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
‚ïëüçÇüáπüá≠ „ÄéP1-P36 link on/off„Äè
‚îÄ‚îÄ‚îÖ‚ïê‚ú•===========‚ú•‚ïê‚îÖ‚îÄ‚îÄ
üëø „ÄéKey„Äè
üëø „ÄéQr on/off„Äè
üëø „ÄéBackup on/off„Äè
üëø „ÄéProtect On/off„Äè
üëø „ÄéNamelock On/off„Äè
    
        ‚îÄ‚îÖ‚ïê‚ú•·µÄ·¥¥·¥¨·¥µ·¥∏·¥¨·¥∫·¥∞‚ú•‚ïê‚îÖ‚îÄ      
             [SELFBOT]
     ‚îÄ‚îÄ‚îÖ‚ïê‚ú•============‚ú•‚ïê‚îÖ‚îÄ‚îÄ"""
    
    return helpMessage
    
def helptexttospeech():
    helpTextToSpeech = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòHelp protect„Äô
‚ï†‚û©„ÄòHelp self„Äô
‚ï†‚û©„ÄòHelp grup„Äô
‚ï†‚û©„ÄòHelp set„Äô
‚ï†‚û©„ÄòHelp media„Äô
‚ï†‚û©„ÄòSpeed„Äô
‚ï†‚û©„ÄòStatus„Äô
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòProtect on/off„Äô
‚ï†‚û©„ÄòQr on/off„Äô
‚ï†‚û©„ÄòInvit on/off„Äô
‚ï†‚û©„ÄòCancel on/off„Äô
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòMe„Äô
‚ï†‚û©„ÄòMyname: „Äô
‚ï†‚û©„ÄòMybio: „Äô
‚ï†‚û©„ÄòMyname„Äô
‚ï†‚û©„ÄòMybio„Äô
‚ï†‚û©„ÄòMypict„Äô
‚ï†‚û©„ÄòMycover„Äô
‚ï†‚û©„ÄòMy,copy @„Äô
‚ï†‚û©„ÄòMybackup„Äô
‚ï†‚û©„ÄòGetgrup image„Äô
‚ï†‚û©„ÄòGetmid @„Äô
‚ï†‚û©„ÄòGetprofile @„Äô
‚ï†‚û©„ÄòGetcontact @„Äô
‚ï†‚û©„ÄòGetinfo @„Äô
‚ï†‚û©„ÄòGetname @„Äô
‚ï†‚û©„ÄòGetbio @„Äô
‚ï†‚û©„ÄòGetpict @„Äô
‚ï†‚û©„ÄòGetcover @„Äô
‚ï†‚û©„ÄòMention„Äô
‚ï†‚û©„ÄòLurk on/off„Äô
‚ï†‚û©„ÄòLurkers„Äô
‚ï†‚û©„ÄòMimic on/off„Äô
‚ï†‚û©„ÄòMicadd @„Äô
‚ï†‚û©„ÄòMicdel @„Äô
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòContact on/off„Äô
‚ï†‚û©„ÄòAutojoin on/off„Äô
‚ï†‚û©„ÄòAutoleave on/off„Äô
‚ï†‚û©„ÄòAutoadd on/off„Äô
‚ï†‚û©„ÄòLike me„Äô
‚ï†‚û©„ÄòLike friend„Äô
‚ï†‚û©„ÄòLike on„Äô
‚ï†‚û©„ÄòRespon on/off„Äô
‚ï†‚û©„ÄòRead on/off„Äô
‚ï†‚û©„ÄòSimisimi on/off„Äô
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòLink on/off„Äô
‚ï†‚û©„ÄòUrl„Äô
‚ï†‚û©„ÄòCancel„Äô
‚ï†‚û©„ÄòGcreator„Äô
‚ï†‚û©„ÄòKi'ck @„Äô
‚ï†‚û©„ÄòUlti @„Äô
‚ï†‚û©„ÄòCancel„Äô
‚ï†‚û©„ÄòGname: „Äô
‚ï†‚û©„ÄòGbroadcast: „Äô
‚ï†‚û©„ÄòCbroadcast: „Äô
‚ï†‚û©„ÄòInfogrup„Äô
‚ï†‚û©„ÄòGruplist„Äô
‚ï†‚û©„ÄòFriendlist„Äô
‚ï†‚û©„ÄòBlocklist„Äô
‚ï†‚û©„ÄòBa'n @„Äô
‚ï†‚û©„ÄòU'nban @„Äô
‚ï†‚û©„ÄòClearban„Äô
‚ï†‚û©„ÄòBanlist„Äô
‚ï†‚û©„ÄòContactban„Äô
‚ï†‚û©„ÄòMidban„Äô
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       ‚úü New function ‚úü
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ï†‚û©„ÄòKalender„Äô
‚ï†‚û©„Äòtr-id „Äô
‚ï†‚û©„Äòtr-en „Äô
‚ï†‚û©„Äòtr-jp „Äô
‚ï†‚û©„Äòtr-ko „Äô
‚ï†‚û©„Äòsay-id „Äô
‚ï†‚û©„Äòsay-en „Äô
‚ï†‚û©„Äòsay-jp „Äô
‚ï†‚û©„Äòsay-ko „Äô
‚ï†‚û©„Äòprofileig „Äô
‚ï†‚û©„Äòcheckdate „Äô
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    return helpTextToSpeech
    
def helptranslate():
    helpTranslate = """
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   ‚ïë [üáπüá≠üêà ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏ó‡∏µ‡πà 3 üêàüáπüá≠] ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       üáπüá≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏öüáπüá≠
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïëüî• Pea1 on ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚ïëüî• Pea1 off ‚û†‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚ïëüî• Pea2 on ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüî• Pea2 off ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüî• Pea3 on ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏•‡∏ö
‚ïëüî• Pea3 off ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏•‡∏ö
‚ïëüî• Mbot on ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏ó
‚ïëüî• Mbot off ‚û†‡∏õ‡∏¥‡∏î‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏ó
‚ïëüî• M on ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
‚ïëüî• M off ‚û†‡∏õ‡∏¥‡∏î‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
‚ïëüî• ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÄ‡πÄ‡∏ó‡πá‡∏Ñ
‚ïëüî• ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ ‚û†‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÄ‡πÄ‡∏ó‡πá‡∏Ñ
‚ïëüî• ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ï‡∏∞‡πÅ‡∏ó‡∏Ñ ‚û†‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÄ‡πÄ‡∏ó‡πá‡∏Ñ
‚ïëüî• ‡∏õ‡∏¥‡∏î‡πÅ‡∏ï‡∏∞‡πÅ‡∏ó‡∏Ñ ‚û†‡∏õ‡∏¥‡∏î‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡πÄ‡πÄ‡∏ó‡πá‡∏Ñ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë         üáπüá≠‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°üáπüá≠
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïëüî• Pea1Àì: ‚û†‡πÑ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚ïëüî• Pea2Àì: ‚û†‡πÑ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüî• Pea3Àì: ‚û†‡πÑ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏•‡∏ö
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       üáπüá≠‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°üáπüá≠
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïëüî• Pea1 ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
‚ïëüî• Pea2 ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å
‚ïëüî• Pea3 ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏•‡∏ö
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    return helpMessage
    
def helptexttospeech():
    helpTextToSpeech ="""
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
   ‚ïë [üáπüá≠üêà ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏ó‡∏µ‡πà 4 üêàüáπüá≠]  ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë       By:‚úæ‡πÅ‡∏°‡∏ß‡πÄ‡∏õ‡πâ‚úç‘≥·Äî‡ªâ„Åï‡∫±‡¶èœÄ‡∫±‡Æû‚û¢
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïëüáπüá≠  ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏≠‡∏î/‡πÄ‡∏ä‡∏Ñ‡πÅ‡∏≠‡∏î ‚û†‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
‚ïëüáπüá≠  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚û†‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚ïëüáπüá≠  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å1 ‚û†‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚ïëüáπüá≠  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏¥‡∏î ‚û†‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡∏Ñ
‚ïëüáπüá≠  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏¥‡∏î ‚û†‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ó‡∏Ñ
‚ïëüáπüá≠  ‡πÄ‡∏ï‡∏∞‡πÅ‡∏°‡πà‡∏á ‚û†‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ö‡∏¥‡∏ô‡∏´‡πâ‡∏≠‡∏á
‚ïëüáπüá≠  pop1 ‚û†‡πÄ‡∏ä‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πà‡∏á‡πÅ‡∏ó‡∏Ñ
‚ïëüáπüá≠  pop2 ‚û†‡πÄ‡∏ä‡∏Ñ‡πÅ‡∏ó‡∏Ñ‡∏™‡∏≠‡∏á
‚ïëüáπüá≠  pop1:.‚û†‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ1
‚ïëüáπüá≠  pop2:.‚û†‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ2
‚ïëüáπüá≠  ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‚û†‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ó‡πÅ‡∏ó‡∏Ñ
‚ïëüáπüá≠  ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‚û†‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

KAC = [line,ki1]
mid = line.getProfile().mid
Amid1 = ki1.getProfile().mid
#Amid2 = ki2.getProfile().mid
#Amid3 = ki3.getProfile().mid
#Amid4 = ki4.getProfile().mid
#Amid5 = ki5.getProfile().mid
#Amid6 = ki6.getProfile().mid
#Amid7 = ki7.getProfile().mid
#Amid8 = ki8.getProfile().mid
#Amid9 = ki9.getProfile().mid
#Amid10 = ki10.getProfile().mid

protectname = []
protecturl = []
protection = []
autocancel = {}
autoinvite = []
autoleaveroom = []
targets = []
mid = line.getProfile().mid
Bots = ["‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ",mid]
self = ["‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ",mid]
admin = "‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ"
admsa = "‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ"
owner = "‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ"
adminMID = "‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ"
Creator="‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~‚òÜ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wait = {
    "alwayRead":False,
    "detectMention":True,    
    "kickMention":False,
    "steal":False,
    'pap':{},
    'invite':{},
    "spam":{},
    'contact':False,
    'autoJoin':True,
    'autoCancel':{"on":True, "members":1},
    'leaveRoom':True,
    'timeline':True,
    'autoAdd':False,
    'message':"[‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥]",
    'message':"Thanks for add Me SELFBOT",
    "lang":"JP",
    "comment":"AutoLike by Moddark",
    "commentOn":False,
    "acommentOn":False,
    "bcommentOn":False,
    "ccommentOn":False,
    "Protectcancl":False,
    "pautoJoin":False,
    "commentBlack":{},
    "wblack":False,
    "dblack":False,
    "clock":False,
    "cName":"SELFBOT",
    "likeOn":False,
    "pname":False,
    "blacklist":{},
    "whitelist":{},
    "wblacklist":False,
    "dblacklist":False,
    "qr":False,
    "Backup":False,
    "protectionOn":False,
    "winvite":False,
    "ainvite":False,
    "binvite":False,
    "protect":False,
    "cancelprotect":False,
    "inviteprotect":False,
    "linkprotect":False,
    "Pea1":False,
    "Pea2":False,
    "Pea3":False,
    "Notifed":False,
    "Notifedbot":False,
    "atjointicket":False,
    "pnharfbot":{},
    "pname":{},
    "pro_name":{},
    "tag1":"\n‡πÇ‡∏≠‡πâ‡∏¢...!!!!!!!!!‡πÇ‡∏≠‡πà‡∏¢‡∏¢‡∏¢!!!‡πÑ‡∏£‡∏≠‡∏µ‡∏Å‡∏ß‡∏∞‡πÄ‡∏ô‡∏µ‡πâ‡∏¢",
    "tag2":"\n‡πÄ‡∏≠‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ..‚úä‡πÅ‡∏ó‡∏Ñ‡∏¢‡∏∏‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏Å‡∏´‡∏≥",
	"posts":False,
	}

wait2 = {
    "readPoint":{},
    "readMember":{},
    "setTime":{},
    "ROM":{}
    }

mimic = {
    "copy":False,
    "copy2":False,
    "status":False,
    "target":{}
    }
    
settings = {
    "simiSimi":{}
    }

res = {
    'num':{},
    'us':{},
    'au':{},
    }

setTime = {}
setTime = wait2['setTime']
mulai = time.time() 

blacklistFile='blacklist.txt'
pendinglistFile='pendinglist.txt'
      
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~‚óè~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
contact = line.getProfile()
mybackup = line.getProfile()
mybackup.displayName = contact.displayName
mybackup.statusMessage = contact.statusMessage
mybackup.pictureStatus = contact.pictureStatus


contact = ki1.getProfile()
backup = ki1.getProfile()
backup.displayName = contact.displayName
backup.statusMessage = contact.statusMessage
backup.pictureStatus = contact.pictureStatus

#contact = ki2.getProfile()
#backup = ki2.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki3.getProfile()
#backup = ki3.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki4.getProfile()
#backup = ki4.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki5.getProfile()
#backup = ki5.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki6.getProfile()
#backup = ki6.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki7.getProfile()
#backup = ki7.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki8.getProfile()
#backup = ki8.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki9.getProfile()
#backup = ki9.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ki10.getProfile()
#backup = ki10.getProfile()
#backup.displayName = contact.displayName
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus
                                  
#~~~~~~~~~‚Ä¢‚Ä¢~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
def restart_program():
    python = sys.executable
    os.execl(python, python, * sys.argv)
    
def sendImageWithUrl(self, to_, url):
      path = '%s/pythonLine-%i.data' % (tempfile.gettempdir(), randint(0, 9))
      r = requests.get(url, stream=True)
      if r.status_code == 200:
         with open(path, 'w') as f:
            shutil.copyfileobj(r.raw, f)
      else:
         raise Exception('Download image failure.')
      try:
         self.sendImage(to_, path)
      except Exception as e:
         raise e
def yt(query):
    with requests.session() as s:
         isi = []
         if query == "":
             query = "S1B tanysyz"   
         s.headers['user-agent'] = 'Mozilla/5.0'
         url    = 'http://www.youtube.com/results'
         params = {'search_query': query}
         r    = s.get(url, params=params)
         soup = BeautifulSoup(r.content, 'html5lib')
         for a in soup.select('.yt-lockup-title > a[title]'):
            if '&list=' not in a['href']:
                if 'watch?v' in a['href']:
                    b = a['href'].replace('watch?v=', '')
                    isi += ['youtu.be' + b]
         return isi

def _images_get_next_item(s):
    start_line = s.find('rg_di')
    if start_line == -1:    #If no links are found then give an error!
        end_quote = 0
        link = "no_links"
        return link, end_quote
    else:
        start_line = s.find('"class="rg_meta"')
        start_content = s.find('"ou"',start_line+90)
        end_content = s.find(',"ow"',start_content-90)
        content_raw = str(s[start_content+6:end_content-1])
        return content_raw, end_content

#Getting all links with the help of '_images_get_next_image'  

def _images_get_all_items(page):
    items = []
    while True:
        item, end_content = _images_get_next_item(page)
        if item == "no_links":
            break
        else:
            items.append(item)      #Append all the links in the list named 'Links'
            time.sleep(0.1)        #Timer could be used to slow down the request for image downloads
            page = page[end_content:]
    return items

def upload_tempimage(client):
    '''
        Upload a picture of a kitten. We don't ship one, so get creative!
    '''
    config = {
        'album': album,
        'name':  'bot auto upload',
        'title': 'bot auto upload',
        'description': 'bot auto upload'
    }

    print("Uploading image... ")
    image = client.upload_from_path(image_path, config=config, anon=False)
    print("Done")
    print()

def summon(to, nama):
    aa = ""
    bb = ""
    strt = int(14)
    akh = int(14)
    nm = nama
    for mm in nm:
      akh = akh + 2
      aa += """{"S":"""+json.dumps(str(strt))+""","E":"""+json.dumps(str(akh))+""","M":"""+json.dumps(mm)+"},"""
      strt = strt + 6
      akh = akh + 4
      bb += "\xe2\x95\xa0 @x \n"
    aa = (aa[:int(len(aa)-1)])
    msg = Message()
    msg.to = to
    msg.text = "\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\n"+bb+"\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90"
    msg.contentMetadata ={'MENTION':'{"MENTIONEES":['+aa+']}','EMTVER':'4'}
    print ("[Command] Tag All")
    try:
       line.sendMessage(msg)
    except Exception as error:
       print error
       
def waktu(secs):
    mins, secs = divmod(secs,60)
    return '%02d Jam %02d Menit %02d Detik' % (hours, mins, secs)      

def cms(string, commands): #/XXX, >XXX, ;XXX, ^XXX, %XXX, $XXX...
    tex = ["+","@","/",">",";","^","%","$","Ôºæ","„Çµ„ÉÜ„É©:","„Çµ„ÉÜ„É©:","„Çµ„ÉÜ„É©Ôºö","„Çµ„ÉÜ„É©Ôºö"]
    for texX in tex:
        for command in commands:
            if string ==command:
                return True
    return False
def sendMessage(self, messageObject):
        return self.Talk.client.sendMessage(0,messageObject)

def sendText(self, Tomid, text):
        msg = Message()
        msg.to = Tomid
        msg.text = text

        return self.Talk.client.sendMessage(0, msg)


def sendImage(self, to_, path):
    M = Message(to=to_, text=None, contentType = 1)
    M.contentMetadata = None
    M.contentPreview = None
    M2 = self._client.sendMessage(0,M)
    M_id = M2.id
    files = {
       'file': open(path, 'rb'),
    }
    params = {
       'name': 'media',
       'oid': M_id,
       'size': len(open(path, 'rb').read()),
       'type': 'image',
       'ver': '1.0',
    }
    data = {
       'params': json.dumps(params)
    }
    r = self.post_content('https://obs-sg.line-apps.com/talk/m/upload.nhn', data=data, files=files)
    if r.status_code != 201:
       raise Exception('Upload image failure.')
    return True

def sendImage2(self, to_, path):
    M = Message(to=to_,contentType = 1)
    M.contentMetadata = None
    M.contentPreview = None
    M_id = self._client.sendMessage(M).id
    files = {
       'file': open(path, 'rb'),
    }
    params = {
       'name': 'media',
       'oid': M_id,
       'size': len(open(path, 'rb').read()),
       'type': 'image',
       'ver': '1.0',
    }
    data = {
       'params': json.dumps(params)
    }
    r = line.post_content('https://os.line.naver.jp/talk/m/upload.nhn', data=data, files=files)
    if r.status_code != 201:
       raise Exception('Upload image failure.')
    return True

def sendMessage(to, text, contentMetadata={}, contentType=0):
    mes = Message()
    mes.to, mes.from_ = to, profile.mid
    mes.text = text
    mes.contentType, mes.contentMetadata = contentType, contentMetadata
    if to not in messageReq:
        messageReq[to] = -1
    messageReq[to] += 1
#~~~~~~~~~~~~~~~~~~~~~~‡∏ô‡∏∏~~~~~~~~~~~~~~~~~~~~~~~
def NOTIFIED_READ_MESSAGE(op):
    try:
        if op.param1 in wait2['readPoint']:
            Name = line.getContact(op.param2).displayName
            if Name in wait2['readMember'][op.param1]:
                pass
            else:
                wait2['readMember'][op.param1] += "\n„Éª" + Name
                wait2['ROM'][op.param1][op.param2] = "„Éª" + Name
        else:
            pass
    except:
        pass

def bot(op):
    try:
        if op.type == 0:
            return
        if op.type == 5:
            if wait["autoAdd"] == True:
                cl.findAndAddContactsByMid(op.param1)
                if (wait["message"] in [""," ","\n",None]):
                    pass
                else:
                    line.sendText(op.param1,str(wait["message"]))


        if op.type == 11:
            if op.param3 == '1':
                if op.param1 in wait['pname']:
                    try:
                        G = line.getGroup(op.param1)
                    except:
                        try:
                            G = ki1.getGroup(op.param1)
                        except:
                            try:
                                G = ki2.getGroup(op.param1)
                            except:
                                try:
                                    G = ki3.getGroup(op.param1)
                                except:
                                    try:
                                        G = ki4.getGroup(op.param1)
				    except:
					try:
                                            G = ki5.getGroup(op.param1)
                                        except:
                                            pass
                    G.name = wait['pro_name'][op.param1]
                    try:
                        line.updateGroup(G)
                    except:
                        try:
                            ki1.updateGroup(G)
                        except:
                            try:
                                ki2.updateGroup(G)
                            except:
                                try:
                                    ki2.updateGroup(G)
                                except:
                                    try:
                                        ki3.updateGroup(G)
                                    except:
                                        try:
                                            ki4.updateGroup(G)
                                        except:
                                            pass
                    if op.param2 in ken:
                        pass
                    else:
                        try:
                            ki1.kickoutFromGroup(op.param1,[op.param2])
                        except:
                            try:
                                ki1.kickoutFromGroup(op.param1,[op.param2])
                            except:
                                try:
                                    ki2.kickoutFromGroup(op.param1,[op.param2])
                                except:
                                    try:
                                        ki3.kickoutFromGroup(op.param1,[op.param2])
                                    except:
                                        try:
                                            ki4.kickoutFromGroup(op.param1,[op.param2])
                                        except:
                                            pass
                                        line.sendText(op.param1,"Group Name Lock")
                                        ki1.sendText(op.param1,"Haddeuh dikunci Pe'a")
                                        ki2.sendText(op.param1,"Wekawekaweka (Har Har)")
                                        c = Message(to=op.param1, from_=None, text=None, contentType=13)
                                        c.contentMetadata={'mid':op.param2}
                                        line.sendMessage(c)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~‡∏ô‡∏∏~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
        if op.type == 13:
                if op.param3 in mid:
                    if op.param2 in mid:
                        G = line.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        line.updateGroup(G)
                        Ticket = line.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        line.updateGroup(G)
                        Ticket = cl.reissueGroupTicket(op.param1)



                if op.param3 in mid:
                    if op.param2 in Amid1:
                        G = ki1.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki1.updateGroup(X)
                        Ti = ki1.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki1.updateGroup(X)
                        Ti = ki1.reissueGroupTicket(op.param1)

                if op.param3 in mid:
                    if op.param2 in Amid2:
                        X = ki2.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki2.updateGroup(X)
                        Ti = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki2.updateGroup(X)
                        Ti = ki2.reissueGroupTicket(op.param1)

                if op.param3 in mid:
                    if op.param2 in Amid3:
                        X = ki3.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki3.updateGroup(X)
                        Ti = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki3.updateGroup(X)
                        Ti = ki3.reissueGroupTicket(op.param1)

                if op.param3 in mid:
                    if op.param2 in Amid4:
                        G = ki4.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki4.updateGroup(X)
                        Ti = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(X)
                        Ti = ki4.reissueGroupTicket(op.param1)

                if op.param3 in mid:
                    if op.param2 in Amid5:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(X)
                        Ti = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(X)
                        Ti = ki5.reissueGroupTicket(op.param1)

                if op.param3 in mid:
                    if op.param2 in Amid6:
                        G = ki6.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki6.updateGroup(X)
                        Ti = ki6.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki6.updateGroup(X)
                        Ti = ki6.reissueGroupTicket(op.param1)
                if op.param3 in mid:
                    if op.param2 in Amid7:
                        G = ki7.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki7.updateGroup(X)
                        Ti = ki7.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki7.updateGroup(X)
                        Ti = ki7.reissueGroupTicket(op.param1)
                if op.param3 in mid:
                    if op.param2 in Amid8:
                        G = ki8.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki8.updateGroup(X)
                        Ti = ki8.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki8.updateGroup(X)
                        Ti = ki8.reissueGroupTicket(op.param1)
                if op.param3 in mid:
                    if op.param2 in Amid9:
                        G = ki9.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki9.updateGroup(X)
                        Ti = ki9.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki9.updateGroup(X)
                        Ti = ki9.reissueGroupTicket(op.param1)
                if op.param3 in mid:
                    if op.param2 in Amid10:
                        G = ki10.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki10.updateGroup(X)
                        Ti = ki10.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1,Ticket)
                        G.preventJoinByTicket = True
                        ki10.updateGroup(X)
                        Ti = ki10.reissueGroupTicket(op.param1)
			
			
			
		if op.param3 in Amid1:
                    if op.param2 in Amid2:
                        X = ki2.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki2.updateGroup(X)
                        Ti = ki1.reissueGroupTicket(op.param1)
                        ki1.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki2.updateGroup(X)
                        Ti = ki2.reissueGroupTicket(op.param1)

                if op.param3 in Amid2:
                    if op.param2 in Amid3:
                        X = ki3.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki3.updateGroup(X)
                        Ti = ki2.reissueGroupTicket(op.param1)
                        ki2.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki3.updateGroup(X)
                        Ti = ki3.reissueGroupTicket(op.param1)

                if op.param3 in Amid3:
                    if op.param2 in Amid4:
                        X = ki4.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki4.updateGroup(X)
                        Ti = ki4.reissueGroupTicket(op.param1)
                        ki3.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki4.updateGroup(X)
                        Ti = ki4.reissueGroupTicket(op.param1)

                if op.param3 in Amid4:
                    if op.param2 in Amid5:
                        X = ki5.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki5.updateGroup(X)
                        Ti = ki5.reissueGroupTicket(op.param1)
                        ki4.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki5.updateGroup(X)
                        Ti = ki5.reissueGroupTicket(op.param1)

                if op.param3 in Amid5:
                    if op.param2 in Amid6:
                        X = ki6.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki6.updateGroup(X)
                        Ti = ki6.reissueGroupTicket(op.param1)
                        ki5.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki6.updateGroup(X)
                        Ti = ki6.reissueGroupTicket(op.param1)

                if op.param3 in Amid6:
                    if op.param2 in Amid7:
                        X = ki7.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki7.updateGroup(X)
                        Ti = ki7.reissueGroupTicket(op.param1)
                        ki6.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki.updateGroup(X)
                        Ti = ki7.reissueGroupTicket(op.param1)

                if op.param3 in Amid7:
                    if op.param2 in Amid8:
                        X = ki8.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki8.updateGroup(X)
                        Ti = ki8.reissueGroupTicket(op.param1)
                        ki7.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki8.updateGroup(X)
                        Ti = ki8.reissueGroupTicket(op.param1)
                if op.param3 in Amid8:
                    if op.param2 in Amid9:
                        X = ki9.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki9.updateGroup(X)
                        Ti = ki9.reissueGroupTicket(op.param1)
                        ki8.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki9.updateGroup(X)
                        Ti = ki9.reissueGroupTicket(op.param1)
                if op.param3 in Amid9:
                    if op.param2 in Amid10:
                        X = ki10.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki7.updateGroup(X)
                        Ti = ki10.reissueGroupTicket(op.param1)
                        ki9.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki10.updateGroup(X)
                        Ti = ki10.reissueGroupTicket(op.param1)
                if op.param3 in Amid10:
                    if op.param2 in Amid1:
                        X = ki.getGroup(op.param1)
                        X.preventJoinByTicket = False
                        ki.updateGroup(X)
                        Ti = ki.reissueGroupTicket(op.param1)
                        ki10.acceptGroupInvitationByTicket(op.param1,Ticket)
                        X.preventJoinByTicket = True
                        ki.updateGroup(X)
                        Ti = ki.reissueGroupTicket(op.param1)
#~~~~~~~~~~~~~~~~~~~~~~~~‡∏ô‡∏∏~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		if op.type == 32:
            if not op.param2 in Bots:
                if wait["protectionOn"] == True: 
                    try:
                        klist=[ki1,ki2,ki3,ki4,ki5,ki6,ki7,ki8,ki9,ki10]
                        kicker = random.choice(klist) 
                        G = kicker.getGroup(op.param1)
                        kicker.kickoutFromGroup(op.param1,[op.param2])
                        kicker.inviteIntoGroup(op.param1, [op.param3])
                    except Exception, e:
                       print e
        if op.type == 13:
            if mid in op.param3:
                G = cl.getGroup(op.param1)
                if wait["autoJoin"] == True:
                    if wait["autoCancel"]["on"] == True:
                        if len(G.members) <= wait["autoCancel"]["members"]:
                            cl.rejectGroupInvitation(op.param1)
                        else:
                            cl.acceptGroupInvitation(op.param1)
                        cl.sendText(op.param1, "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô.\n[by'“®‡∞ñ‡¶£‡≤ñ‡Æá‚Ü≠‡¶ß‡∏±—é”Ñ’Å‡πà‡¶ó·É°]\nhttp://line.me/ti/p/~antmod.")
                    else:
                        cl.acceptGroupInvitation(op.param1)
                        cl.sendText(op.param1, "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô.\n[by'“®‡∞ñ‡¶£‡≤ñ‡Æá‚Ü≠‡¶ß‡∏±—é”Ñ’Å‡πà‡¶ó·É°]\nhttp://line.me/ti/p/~antmod.")
                elif wait["autoCancel"]["on"] == True:
                    if len(G.members) <= wait["autoCancel"]["members"]:
                        cl.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("",',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in wait["blacklist"]:
                    matched_list+=filter(lambda str: str == tag, InviterX)
                if matched_list == []:
                    pass
                else:
                    cl.cancelGroupInvitation(op.param1, matched_list)
            if Amid1 in op.param3:
                G = cl.getGroup(op.param1)
                if wait["autoJoin"] == True:
                    if wait["autoCancel"]["on"] == True:
                        if len(G.members) <= wait["autoCancel"]["members"]:
                            ki1.rejectGroupInvitation(op.param1)
                        else:
                            ki1.acceptGroupInvitation(op.param1)
                    else:
                        ki1.acceptGroupInvitation(op.param1)
                elif wait["autoCancel"]["on"] == True:
                    if len(G.members) <= wait["autoCancel"]["members"]:
                        ki1.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("",',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in wait["blacklist"]:
                    matched_list+=filter(lambda str: str == tag, InviterX)
                if matched_list == []:
                    pass
                else:
                    ki1.cancelGroupInvitation(op.param1, matched_list)
            if Amid2 in op.param3:
                G = cl.getGroup(op.param1)
                if wait["autoJoin"] == True:
                    if wait["autoCancel"]["on"] == True:
                        if len(G.members) <= wait["autoCancel"]["members"]:
                            ki2.rejectGroupInvitation(op.param1)
                        else:
                            ki2.acceptGroupInvitation(op.param1)
                    else:
                        ki2.acceptGroupInvitation(op.param1)
                elif wait["autoCancel"]["on"] == True:
                    if len(G.members) <= wait["autoCancel"]["members"]:
                        ki2.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("",',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in wait["blacklist"]:
                    matched_list+=filter(lambda str: str == tag, InviterX)
                if matched_list == []:
                    pass
                else:
                    ki2.cancelGroupInvitation(op.param1, matched_list)
		if op.type == 11:
            if not op.param2 in Bots:
              if wait["qr"] == True:  
                try:
                    klist=[ki1,ki2,ki3,ki4,ki5,ki6,ki7,ki8,ki9,ki10]
                    kicker = random.choice(klist) 
                    G = kicker.getGroup(op.param1)
                    G.preventJoinByTicket = True
                    kicker.updateGroup(G)
                except Exception, e:
                    print e
        if op.type == 11:
            if not op.param2 in Bots:
              if wait["protectionOn"] == True:
                 try:                    
                    klist=[ki1,ki2,ki3,ki4,ki5,ki6,ki7,ki8,ki9,ki10]
                    kicker = random.choice(klist) 
                    G = kicker.getGroup(op.param1)
                    G.preventJoinByTicket = True
                    kicker.updateGroup(G)
                    kicker.kickoutFromGroup(op.param1,[op.param2])
                    G.preventJoinByTicket = True
                    kicker.updateGroup(G)
                 except Exception, e:
                           print e
        if op.type == 13:
            G = cl.getGroup(op.param1)
            I = G.creator
            if not op.param2 in Bots:
                if wait["protectionOn"] == True:  
                    klist=[ki1,ki2,ki3,ki4,ki5,ki6,ki7,ki8,ki9,ki10]
                    kicker = random.choice(klist)
                    G = kicker.getGroup(op.param1)
                    if G is not None:
                        gInviMids = [contact.mid for contact in G.invitee]
                        kicker.cancelGroupInvitation(op.param1, gInviMids)
        if op.type == 19:
                if not op.param2 in Bots:
                    try:
                        gs = ki1.getGroup(op.param1)
                        gs = ki2.getGroup(op.param1)
                        targets = [op.param2]
                        for target in targets:
                           try:
                                wait["blacklist"][target] = True
                                f=codecs.open('st2__b.json','w','utf-8')
                                json.dump(wait["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                           except:
                            pass
                                
                    except Exception, e:
                        print e
                if not op.param2 in Bots:
                  if wait["Backup"] == True:
                    try:
                        random.choice(KAC).inviteIntoGroup(op.param1, [op.param3])
                    except Exception, e:
                        print e
                if not op.param2 in Bots:
                  if wait["protectionOn"] == True:  
                   try:
                       klist=[ki1,ki2,ki3,ki4,ki5,ki6,ki7,ki8,ki9,ki10]
		kicker = random.choice(klist)
                       G = kicker.getGroup(op.param1)
                       G.preventJoinByTicket = False
                       kicker.updateGroup(G)
                       invsend = 0
                       Ticket = kicker.reissueGroupTicket(op.param1)
                       kl1.acceptGroupInvitationByTicket(op.param1,Ticket)
                       time.sleep(0.1)
                       X = kicker.getGroup(op.param1)             
                       X.preventJoinByTicket = True
                       kl1.kickoutFromGroup(op.param1,[op.param2])
                       kicker.kickoutFromGroup(op.param1,[op.param2])
                       kl1.leaveGroup(op.param1)
                       kicker.updateGroup(X)
                   except Exception, e:
                            print e
                if not op.param2 in Bots:
                    try:
                        gs = ki1.getGroup(op.param1)
                        gs = ki2.getGroup(op.param1)
                        targets = [op.param2]
                        for target in targets:
                           try:
                                wait["blacklist"][target] = True
                                f=codecs.open('st2__b.json','w','utf-8')
                                json.dump(wait["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                           except:
                            pass
                                
                    except Exception, e:
                        print e
                if not op.param2 in Bots:
                  if wait["Backup"] == True:
                    try:
                        random.choice(KAC).inviteIntoGroup(op.param1, [op.param3])
                    except Exception, e:
                        print e
        if op.type == 19:              
                if mid in op.param3:
                    if op.param2 in Bots:
                        pass                   
                    try:
                        ki1.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client Kick regulation or Because it does not exist in the group„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\n„ÇíËπ¥„Çã‰∫ã„Åå„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n„Éñ„É©„ÉÉ„ÇØ„É™„Çπ„Éà„Å´ËøΩÂä†„Åó„Åæ„Åô„ÄÇ")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                    G = ki1.getGroup(op.param1)
                    G.preventJoinByTicket = False
                    ki1.updateGroup(G)
                    Ti = ki1.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)
X = cl.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    cl.updateGroup(X)
                    Ti = cl.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True

                if Amid1 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki2.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
			

			X = ki2.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki2.updateGroup(X)
                    Ti = ki2.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki1.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki1.updateGroup(X)
                    Ticket = ki1.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True


                if Amid2 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki3.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
			
			X = ki3.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki3.updateGroup(X)
                    Ti = ki3.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki2.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki2.updateGroup(X)
                    Ticket = ki2.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid3 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki4.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
				                  X = ki4.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki4.updateGroup(X)
                    Ti = ki4.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki3.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki3.updateGroup(X)
                    Ticket = ki3.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid4 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki5.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
			
			  X = ki5.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki5.updateGroup(X)
                    Ti = ki5.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki4.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki4.updateGroup(X)
                    Ticket = ki4.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid5 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki6.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
                    X = ki6.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki6.updateGroup(X)
                    Ti = ki6.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki5.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki5.updateGroup(X)
                    Ticket = ki5.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid6 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki7.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
				
				               
                    X = ki7.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki7.updateGroup(X)
                    Ti = ki7.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki6.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki6.updateGroup(X)
                    Ticket = ki6.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid7 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki8.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
                    X = ki8.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki8.updateGroup(X)
                    Ti = ki8.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki7.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki7.updateGroup(X)
                    Ticket = ki7.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid8 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki9.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
                    X = ki9.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki9.updateGroup(X)
                    Ti = ki9.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki8.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki8.updateGroup(X)
                    Ticket = ki8.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid9 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki10.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
				
				X = ki10.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki10.updateGroup(X)
                    Ti = ki10.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

                    X = ki9.getGroup(op.param1)
                    X.preventJoinByTicket = True
                    ki9.updateGroup(X)
                    Ticket = ki9.reissueGroupTicket(op.param1)                    
                    if op.param2 in wait["blacklist"]:
                        pass
                    if op.param2 in wait["whitelist"]:
                        pass
                    else:
                        wait["blacklist"][op.param2] = True
                if Amid10 in op.param3:
                    if op.param2 in Bots:
                        pass                    
                    try:
                        ki1.kickoutFromGroup(op.param1,[op.param2])
                    except:
                        try:
                            random.choice(KAC).kickoutFromGroup(op.param1,[op.param2])
                        except:
                            print ("client „ÅåËπ¥„ÇäË¶èÂà∂or„Ç∞„É´„Éº„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑÁÇ∫„ÄÅ\n["+op.param1+"]\n„ÅÆ\n["+op.param2+"]\nBecause the client does not exist in the kick regulation or group.\nAdd it to the blacklist.")
                        if op.param2 in wait["blacklist"]:
                            pass
                        if op.param2 in wait["whitelist"]:
                            pass
                        else:
                            wait["blacklist"][op.param2] = True
                            
                    X = ki1.getGroup(op.param1)
                    X.preventJoinByTicket = False
                    ki1.updateGroup(X)
                    Ti = ki1.reissueGroupTicket(op.param1)
                    cl.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki1.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki2.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki3.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki4.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki5.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki6.acceptGroupInvitationByTicket(op.param1,Ti)
                    time.sleep(0.01)
                    ki7.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki8.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki9.acceptGroupInvitationByTicket(op.param1,Ti)
                    ki10.acceptGroupInvitationByTicket(op.param1,Ti)

				
